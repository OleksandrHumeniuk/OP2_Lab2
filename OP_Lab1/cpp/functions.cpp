#include <iostream>
#include <fstream>
#include <string>
#include <vector>

using namespace std;


// This enum and function is used to let user choose the mode for information input (overwriting or adding)
enum Mode {
	OVERWRITING = 1,										// Overwriting mode: program erases any text that the file might have
	ADDING = 2											// Adding mode: program writes text on top of text from the file
};
int chooseMode() {
	string ch;											// Character that user writes to choose mode
	cout << "Choose writing mode (1 - for overwriting text, 2 - for adding text): ";
	cin >> ch;

	while (ch != "1" && ch != "2") {								// The function will ask for user input, until it's "1" or "2"
		cout << "You may only enter a '1' or an '2'!" << endl;
		cout << "Choose writing mode (1 - for overwriting text, 2 - for adding text): ";
		cin >> ch;
	}

	return stoi(ch);										// The function returns an int 1, which in enum Mode stands for OVERWRITING,
}													// or an int 2, which stands for ADDING



/* This function creates input file with user-chosen name and using user-chose mode.
 * After opening selected input file, the function lets the user input text through console: line by line, until CTRL+G is inputted. 
 */
void createInputFile(string name, int mode) {

	ofstream inputFile;										// Stream to input text in input file
	if (Mode::OVERWRITING == mode) {
		inputFile.open(name);
	}
	else {
		inputFile.open(name, ios::app);
	}

	string line;											// Assisting string
	size_t combinationCode = 7;									// The ASCII code of the symbol, generated by CTRL + G 

	cout << "Input your text. ENTER for next line. CTRL+G to stop" << endl;
	cin.ignore();

	if (inputFile) {										// If the file is properly opened, the function accepts the first line of text through
													// the console. If it's not the ending code, it writes it in the file without "\n" before.
		getline(cin, line);									// All of the next lines are inputted in the while loop with "\n" before each line.
		if (line[0] != combinationCode) {
			inputFile << line;
			getline(cin, line);
			while (line[0] != combinationCode) {
				inputFile << "\n" << line;
				getline(cin, line);
			}
		}
	}
	inputFile.close();
}


// This functions is splitting text from file with user-selected name into string vector of words
vector <string> getWords(string name) {
	vector <string> words;										// String vector of words
	string word;											// Individual word 
	ifstream inputFile(name);

	while (!inputFile.eof()) {									
		inputFile >> word;
		words.push_back(word);
	}

	inputFile.close();
	return words;
}


// This function is counting how many times the word is repeated in vector words
int countWords(string word, vector <string> words) {
	int counter = 0;										// Hold number of times the word repeats
	for (string s : words) {
		if (s == word) {
			++counter;
		}
	}
	return counter;
}


// This function checks whether string s consists only of digits or "-" symbol
bool isNum(string s)
{
	for (char ch : s) {
		if (!isdigit(ch) and ch != '-') return false;
	}
	return true;
}


// This function lets the user to enter an integer, and not something else
int inputNum() {
	string n;
	cout << "Enter number N: ";
	cin >> n;

	while (!isNum(n)) {
		cout << "You can only enter an interger number: ";
		cin >> n;
	}
	return stoi(n);
}


// This function removes all occurrences of word from string vector words
vector <string> removeWord(vector<string> words, string word) {

	vector <string> newWords;									// New string vector without the word

	for (string s : words) {
		if (s != word) {
			newWords.push_back(s);
		}
	}

	return newWords;
}


// This function creates a string vector, which consists only of words from file that repeat more than n times
vector <string> createRepeatingVector(string name, int n) {

	vector <string> words = getWords(name);								// String vector that holds all splitted words

	vector <string> updatedWords = words;								// String vector that holds words that repeat more than n times

	int counter;
	for (string word : words) {
		counter = countWords(word, words);							// Variable that stores number of times an individual word repeats
		if (counter <= n) {
			updatedWords = removeWord(updatedWords, word);
		}
	}

	return updatedWords;
}


// This function sorts words by length ascendingly in string vector using Odd-Even Bubble Sort
void oddEvenSort(vector <string>& words) {
	bool sorted = false;
	while (!sorted) {
		sorted = true;

		for (int i = 0; i < words.size() - 1; i += 2) {
			if (words[i].length() > words[i + 1].length()) {
				string temp = words[i];
				words[i] = words[i + 1];
				words[i + 1] = temp;
				sorted = false;
			}
		}

		for (int i = 1; i < words.size() - 1; i += 2) {
			if (words[i].length() > words[i + 1].length()) {
				string temp = words[i];
				words[i] = words[i + 1];
				words[i + 1] = temp;
				sorted = false;
			}
		}
	}
}


// This function creates output file based on input file
void createOutputFile(string outputName, string inputName) {

	int n = inputNum();									// Number n that user inputs
	vector <string> repeatingWords = createRepeatingVector(inputName, n);			// String vector that holds only words that repeat more than n times
	oddEvenSort(repeatingWords);								// Sort the string vector
		
	ofstream outputFile(outputName);

	if (repeatingWords.size() > 0) outputFile << repeatingWords[0];				// First word is written in the file without a space before		
	for (int i = 1; i < repeatingWords.size(); i++) {					// Next words are written with a space before
		outputFile << " " << repeatingWords[i];
	}
	outputFile.close();
}


// This function outputs text from user-selected file in console
void printFile(string name, string text) {

	string line;										// Assisting string
	ifstream inputFile(name);

	cout << text << endl;									// Header of the text

	while (!inputFile.eof()) {
		getline(inputFile, line);
		cout << line << endl;
	}

	inputFile.close();
}
